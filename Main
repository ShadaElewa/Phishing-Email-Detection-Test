{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":6090437,"sourceType":"datasetVersion","datasetId":3487818}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/shadaelewa/phishing-email-detection-test?scriptVersionId=193641774\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-22T19:41:22.527429Z","iopub.execute_input":"2024-08-22T19:41:22.52809Z","iopub.status.idle":"2024-08-22T19:41:23.526127Z","shell.execute_reply.started":"2024-08-22T19:41:22.528058Z","shell.execute_reply":"2024-08-22T19:41:23.525185Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/phishingemails/Phishing_Email.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 1| Download the dataset","metadata":{}},{"cell_type":"code","source":"!pip install kaggle\n!mkdir -p ~/.kaggle\n!cp kaggle.json ~/.kaggle/\n!chmod 600 ~/.kaggle/kaggle.json\n!kaggle datasets download -d subhajournal/phishingemails","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:23.528088Z","iopub.execute_input":"2024-08-22T19:41:23.528607Z","iopub.status.idle":"2024-08-22T19:41:42.880612Z","shell.execute_reply.started":"2024-08-22T19:41:23.528547Z","shell.execute_reply":"2024-08-22T19:41:42.879686Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirement already satisfied: kaggle in /opt/conda/lib/python3.10/site-packages (1.6.14)\nRequirement already satisfied: six>=1.10 in /opt/conda/lib/python3.10/site-packages (from kaggle) (1.16.0)\nRequirement already satisfied: certifi>=2023.7.22 in /opt/conda/lib/python3.10/site-packages (from kaggle) (2024.7.4)\nRequirement already satisfied: python-dateutil in /opt/conda/lib/python3.10/site-packages (from kaggle) (2.9.0.post0)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from kaggle) (2.32.3)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from kaggle) (4.66.4)\nRequirement already satisfied: python-slugify in /opt/conda/lib/python3.10/site-packages (from kaggle) (8.0.4)\nRequirement already satisfied: urllib3 in /opt/conda/lib/python3.10/site-packages (from kaggle) (1.26.18)\nRequirement already satisfied: bleach in /opt/conda/lib/python3.10/site-packages (from kaggle) (6.1.0)\nRequirement already satisfied: webencodings in /opt/conda/lib/python3.10/site-packages (from bleach->kaggle) (0.5.1)\nRequirement already satisfied: text-unidecode>=1.3 in /opt/conda/lib/python3.10/site-packages (from python-slugify->kaggle) (1.3)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->kaggle) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->kaggle) (3.6)\ncp: cannot stat 'kaggle.json': No such file or directory\nchmod: cannot access '/root/.kaggle/kaggle.json': No such file or directory\nWarning: Looks like you're using an outdated API Version, please consider updating (server 1.6.17 / client 1.6.14)\nDataset URL: https://www.kaggle.com/datasets/subhajournal/phishingemails\nLicense(s): GNU Lesser General Public License 3.0\nDownloading phishingemails.zip to /kaggle/working\n 94%|███████████████████████████████████▊  | 17.0M/18.0M [00:01<00:00, 27.5MB/s]\n100%|██████████████████████████████████████| 18.0M/18.0M [00:01<00:00, 18.0MB/s]\n","output_type":"stream"}]},{"cell_type":"code","source":"!unzip /content/phishingemails.zip","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:42.882404Z","iopub.execute_input":"2024-08-22T19:41:42.882808Z","iopub.status.idle":"2024-08-22T19:41:43.890703Z","shell.execute_reply.started":"2024-08-22T19:41:42.88277Z","shell.execute_reply":"2024-08-22T19:41:43.889792Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"unzip:  cannot find or open /content/phishingemails.zip, /content/phishingemails.zip.zip or /content/phishingemails.zip.ZIP.\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 2| Import Necessary libs","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport plotly.express as px\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.layers import Embedding,GRU,LSTM,Bidirectional,SimpleRNN\nfrom tensorflow.keras.utils import pad_sequences\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.models import Sequential\nfrom keras.layers import Dense,Dropout\nimport tensorflow as tf\nimport warnings\n\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:43.893434Z","iopub.execute_input":"2024-08-22T19:41:43.893723Z","iopub.status.idle":"2024-08-22T19:41:56.701952Z","shell.execute_reply.started":"2024-08-22T19:41:43.893696Z","shell.execute_reply":"2024-08-22T19:41:56.7011Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-08-22 19:41:47.003277: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-08-22 19:41:47.003377: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-08-22 19:41:47.126083: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 3| Loading our data","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/phishingemails/Phishing_Email.csv\")\n\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:56.703018Z","iopub.execute_input":"2024-08-22T19:41:56.703597Z","iopub.status.idle":"2024-08-22T19:41:57.732215Z","shell.execute_reply.started":"2024-08-22T19:41:56.703569Z","shell.execute_reply":"2024-08-22T19:41:57.731271Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0                                         Email Text  \\\n0           0  re : 6 . 1100 , disc : uniformitarianism , re ...   \n1           1  the other side of * galicismos * * galicismo *...   \n2           2  re : equistar deal tickets are you still avail...   \n3           3  \\nHello I am your hot lil horny toy.\\n    I am...   \n4           4  software at incredibly low prices ( 86 % lower...   \n\n       Email Type  \n0      Safe Email  \n1      Safe Email  \n2      Safe Email  \n3  Phishing Email  \n4  Phishing Email  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>Email Text</th>\n      <th>Email Type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>re : 6 . 1100 , disc : uniformitarianism , re ...</td>\n      <td>Safe Email</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>the other side of * galicismos * * galicismo *...</td>\n      <td>Safe Email</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>re : equistar deal tickets are you still avail...</td>\n      <td>Safe Email</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>\\nHello I am your hot lil horny toy.\\n    I am...</td>\n      <td>Phishing Email</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>software at incredibly low prices ( 86 % lower...</td>\n      <td>Phishing Email</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# 4| Text Preprocessing","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:57.733338Z","iopub.execute_input":"2024-08-22T19:41:57.733613Z","iopub.status.idle":"2024-08-22T19:41:57.746303Z","shell.execute_reply.started":"2024-08-22T19:41:57.733588Z","shell.execute_reply":"2024-08-22T19:41:57.74543Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"Unnamed: 0     0\nEmail Text    16\nEmail Type     0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"** There are 16 rows available that have null values .Let's remove these rows\n\n","metadata":{}},{"cell_type":"markdown","source":"## 4.1| Drop duplicates and null values","metadata":{}},{"cell_type":"code","source":"df.drop([\"Unnamed: 0\"],axis=1,inplace=True)\ndf.dropna(inplace=True,axis=0)\ndf.drop_duplicates(inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:57.747444Z","iopub.execute_input":"2024-08-22T19:41:57.747787Z","iopub.status.idle":"2024-08-22T19:41:57.877597Z","shell.execute_reply.started":"2024-08-22T19:41:57.747756Z","shell.execute_reply":"2024-08-22T19:41:57.876866Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"print(\"Dimension of the row data:\",df.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:57.878719Z","iopub.execute_input":"2024-08-22T19:41:57.879077Z","iopub.status.idle":"2024-08-22T19:41:57.884019Z","shell.execute_reply.started":"2024-08-22T19:41:57.879046Z","shell.execute_reply":"2024-08-22T19:41:57.883176Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Dimension of the row data: (17538, 2)\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:57.885153Z","iopub.execute_input":"2024-08-22T19:41:57.885469Z","iopub.status.idle":"2024-08-22T19:41:57.897988Z","shell.execute_reply.started":"2024-08-22T19:41:57.885439Z","shell.execute_reply":"2024-08-22T19:41:57.897183Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"                                          Email Text      Email Type\n0  re : 6 . 1100 , disc : uniformitarianism , re ...      Safe Email\n1  the other side of * galicismos * * galicismo *...      Safe Email\n2  re : equistar deal tickets are you still avail...      Safe Email\n3  \\nHello I am your hot lil horny toy.\\n    I am...  Phishing Email\n4  software at incredibly low prices ( 86 % lower...  Phishing Email","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Email Text</th>\n      <th>Email Type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>re : 6 . 1100 , disc : uniformitarianism , re ...</td>\n      <td>Safe Email</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>the other side of * galicismos * * galicismo *...</td>\n      <td>Safe Email</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>re : equistar deal tickets are you still avail...</td>\n      <td>Safe Email</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>\\nHello I am your hot lil horny toy.\\n    I am...</td>\n      <td>Phishing Email</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>software at incredibly low prices ( 86 % lower...</td>\n      <td>Phishing Email</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Create the bar chart\nfig = px.bar(df['Email Type'].value_counts(), x=df['Email Type'].value_counts().index, y=df['Email Type'].value_counts().values,\n             color=['blue', 'red'], labels={'x': 'Category', 'y': 'Count'},\n             title=\"Categorical Distribution\")\n\n# Show the plot\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:57.901642Z","iopub.execute_input":"2024-08-22T19:41:57.901992Z","iopub.status.idle":"2024-08-22T19:41:59.369501Z","shell.execute_reply.started":"2024-08-22T19:41:57.901968Z","shell.execute_reply":"2024-08-22T19:41:59.368599Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/html":"        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.27.0.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        "},"metadata":{}},{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"e8be258e-e5c8-426f-aadc-125fb1d21276\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e8be258e-e5c8-426f-aadc-125fb1d21276\")) {                    Plotly.newPlot(                        \"e8be258e-e5c8-426f-aadc-125fb1d21276\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"color=blue\\u003cbr\\u003eCategory=%{x}\\u003cbr\\u003eCount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"blue\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"blue\",\"offsetgroup\":\"blue\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"Safe Email\"],\"xaxis\":\"x\",\"y\":[10980],\"yaxis\":\"y\",\"type\":\"bar\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"color=red\\u003cbr\\u003eCategory=%{x}\\u003cbr\\u003eCount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"red\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"red\",\"offsetgroup\":\"red\",\"orientation\":\"v\",\"showlegend\":true,\"textposition\":\"auto\",\"x\":[\"Phishing Email\"],\"xaxis\":\"x\",\"y\":[6558],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Category\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Count\"}},\"legend\":{\"title\":{\"text\":\"color\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Categorical Distribution\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('e8be258e-e5c8-426f-aadc-125fb1d21276');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Insigths :\n\nThe count of the safe emails is more than that of phishing email so if we see any emails that look like phishing delete","metadata":{}},{"cell_type":"code","source":"# Create the pie chart\nfig_pie = px.pie(df['Email Type'].value_counts(), names=df['Email Type'].value_counts().index,\n                 values=df['Email Type'].value_counts().values, title=\"Categorical Distribution\")\n\n# Show the pie chart\nfig_pie.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:59.370578Z","iopub.execute_input":"2024-08-22T19:41:59.370886Z","iopub.status.idle":"2024-08-22T19:41:59.453582Z","shell.execute_reply.started":"2024-08-22T19:41:59.370859Z","shell.execute_reply":"2024-08-22T19:41:59.452639Z"},"trusted":true},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/html":"<div>                            <div id=\"6b83b18f-1a76-4df1-b899-85ef1e5839b8\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"6b83b18f-1a76-4df1-b899-85ef1e5839b8\")) {                    Plotly.newPlot(                        \"6b83b18f-1a76-4df1-b899-85ef1e5839b8\",                        [{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"hovertemplate\":\"label=%{label}\\u003cbr\\u003evalue=%{value}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"labels\":[\"Safe Email\",\"Phishing Email\"],\"legendgroup\":\"\",\"name\":\"\",\"showlegend\":true,\"values\":[10980,6558],\"type\":\"pie\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Categorical Distribution\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('6b83b18f-1a76-4df1-b899-85ef1e5839b8');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 4.2| Integer Encoding","metadata":{}},{"cell_type":"code","source":"le = LabelEncoder()\n\ndf[\"Email Type\"] = le.fit_transform(df[\"Email Type\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:59.454617Z","iopub.execute_input":"2024-08-22T19:41:59.454915Z","iopub.status.idle":"2024-08-22T19:41:59.463716Z","shell.execute_reply.started":"2024-08-22T19:41:59.454891Z","shell.execute_reply":"2024-08-22T19:41:59.462849Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:59.464805Z","iopub.execute_input":"2024-08-22T19:41:59.465084Z","iopub.status.idle":"2024-08-22T19:41:59.479089Z","shell.execute_reply.started":"2024-08-22T19:41:59.465056Z","shell.execute_reply":"2024-08-22T19:41:59.478223Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"                                              Email Text  Email Type\n0      re : 6 . 1100 , disc : uniformitarianism , re ...           1\n1      the other side of * galicismos * * galicismo *...           1\n2      re : equistar deal tickets are you still avail...           1\n3      \\nHello I am your hot lil horny toy.\\n    I am...           0\n4      software at incredibly low prices ( 86 % lower...           0\n...                                                  ...         ...\n18644  \\nRick Moen  a Ã©crit:> > I'm confused. I thou...           1\n18645  date a lonely housewife always wanted to date ...           0\n18646  request submitted : access request for anita ....           1\n18647  re : important - prc mtg hi dorn & john , as y...           1\n18648  press clippings - letter on californian utilit...           1\n\n[17538 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Email Text</th>\n      <th>Email Type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>re : 6 . 1100 , disc : uniformitarianism , re ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>the other side of * galicismos * * galicismo *...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>re : equistar deal tickets are you still avail...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>\\nHello I am your hot lil horny toy.\\n    I am...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>software at incredibly low prices ( 86 % lower...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>18644</th>\n      <td>\\nRick Moen  a Ã©crit:&gt; &gt; I'm confused. I thou...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18645</th>\n      <td>date a lonely housewife always wanted to date ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18646</th>\n      <td>request submitted : access request for anita ....</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18647</th>\n      <td>re : important - prc mtg hi dorn &amp; john , as y...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18648</th>\n      <td>press clippings - letter on californian utilit...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>17538 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 4.3 Remove hyperlinks, punctuations, extra space","metadata":{}},{"cell_type":"code","source":"import re\n\ndef preprocess_text(text):\n    # Remove hyperlinks\n    text = re.sub(r'http\\S+', '', text)\n\n    # Remove punctuations\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove extra spaces\n    text = re.sub(r'\\s+', ' ', text).strip()\n    return text\n\n\n# Apply the preprocess_text function to the specified column in the DataFrame\ndf[\"Email Text\"] =df[\"Email Text\"].apply(preprocess_text)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:41:59.48029Z","iopub.execute_input":"2024-08-22T19:41:59.480729Z","iopub.status.idle":"2024-08-22T19:42:05.96406Z","shell.execute_reply.started":"2024-08-22T19:41:59.480687Z","shell.execute_reply":"2024-08-22T19:42:05.963254Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:05.965243Z","iopub.execute_input":"2024-08-22T19:42:05.965991Z","iopub.status.idle":"2024-08-22T19:42:05.975622Z","shell.execute_reply.started":"2024-08-22T19:42:05.965955Z","shell.execute_reply":"2024-08-22T19:42:05.974658Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"                                          Email Text  Email Type\n0  re 6 1100 disc uniformitarianism re 1086 sex l...           1\n1  the other side of galicismos galicismo is a sp...           1\n2  re equistar deal tickets are you still availab...           1\n3  hello i am your hot lil horny toy i am the one...           0\n4  software at incredibly low prices 86 lower dra...           0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Email Text</th>\n      <th>Email Type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>re 6 1100 disc uniformitarianism re 1086 sex l...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>the other side of galicismos galicismo is a sp...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>re equistar deal tickets are you still availab...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>hello i am your hot lil horny toy i am the one...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>software at incredibly low prices 86 lower dra...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## 4.4 Converting text into vector\n\n### 4.4.1 Tfidf vectorizer","metadata":{}},{"cell_type":"code","source":"tf = TfidfVectorizer(stop_words=\"english\",max_features=10000) #dimension reduction\n\nfeature_x = tf.fit_transform(df[\"Email Text\"]).toarray()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:05.976858Z","iopub.execute_input":"2024-08-22T19:42:05.977124Z","iopub.status.idle":"2024-08-22T19:42:14.541992Z","shell.execute_reply.started":"2024-08-22T19:42:05.977101Z","shell.execute_reply":"2024-08-22T19:42:14.541072Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"y_tf = np.array(df['Email Type']) # convert the label into numpy array","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:14.543147Z","iopub.execute_input":"2024-08-22T19:42:14.543469Z","iopub.status.idle":"2024-08-22T19:42:14.548261Z","shell.execute_reply.started":"2024-08-22T19:42:14.543443Z","shell.execute_reply":"2024-08-22T19:42:14.547339Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":"### 4.4.2 Splitting into train and test","metadata":{}},{"cell_type":"code","source":"x_train,x_test,y_train,y_test = train_test_split(feature_x,y_tf,train_size=0.8,random_state=0)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:14.549373Z","iopub.execute_input":"2024-08-22T19:42:14.549683Z","iopub.status.idle":"2024-08-22T19:42:15.041054Z","shell.execute_reply.started":"2024-08-22T19:42:14.549653Z","shell.execute_reply":"2024-08-22T19:42:15.040235Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"# 5| Applying different algorithm","metadata":{}},{"cell_type":"markdown","source":"## 5.1| Naive Bayes","metadata":{}},{"cell_type":"code","source":"#naive bayes works with condtional probability\nfrom sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB()\nnb.fit(x_train,y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:15.042136Z","iopub.execute_input":"2024-08-22T19:42:15.042429Z","iopub.status.idle":"2024-08-22T19:42:15.349496Z","shell.execute_reply.started":"2024-08-22T19:42:15.042404Z","shell.execute_reply":"2024-08-22T19:42:15.348306Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"MultinomialNB()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score,f1_score,classification_report,ConfusionMatrixDisplay,confusion_matrix\npred_nav = nb.predict(x_test)\n\n# Checking the performance\n\nprint(f\"accuracy from naive bayes: {accuracy_score(y_test,pred_nav)*100:.2f} %\")\nprint(f\"f1 score from naive bayes: {f1_score(y_test,pred_nav)*100:.2f} %\")\nprint(\"classification report :\\n\\n\",classification_report(y_test,pred_nav))\n\n#confusion matrix\nclf_nav = confusion_matrix(y_test,pred_nav)\ncx_ = ConfusionMatrixDisplay(clf_nav,display_labels=['pishing_mail','safe_mail']).plot()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:15.351512Z","iopub.execute_input":"2024-08-22T19:42:15.352344Z","iopub.status.idle":"2024-08-22T19:42:15.767283Z","shell.execute_reply.started":"2024-08-22T19:42:15.3523Z","shell.execute_reply":"2024-08-22T19:42:15.76637Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"accuracy from naive bayes: 97.52 %\nf1 score from naive bayes: 97.99 %\nclassification report :\n\n               precision    recall  f1-score   support\n\n           0       0.97      0.96      0.97      1351\n           1       0.98      0.98      0.98      2157\n\n    accuracy                           0.98      3508\n   macro avg       0.97      0.97      0.97      3508\nweighted avg       0.98      0.98      0.98      3508\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## 5.2| Logistic Regression","metadata":{}},{"cell_type":"code","source":"lg = LogisticRegression()\nlg.fit(x_train,y_train)\n\n# prediction\npred_lg = lg.predict(x_test)\n# performance\nprint(\"\")\nprint(f\"accuracy from logistic regression:{accuracy_score(y_test,pred_lg)*100:.2f} %\")\nprint(f\"f1 score from logistic regression: {f1_score(y_test,pred_lg)*100:.2f} %\")\nprint(\"classification report : \\n\",classification_report(y_test,pred_lg))\n\nclf_lg = confusion_matrix(y_test,pred_lg)\ncx_ = ConfusionMatrixDisplay(clf_lg,display_labels=['pishing_mail','safe_mail']).plot()\nplt.title(\"confusion matrix\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:15.768638Z","iopub.execute_input":"2024-08-22T19:42:15.769265Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# save the model for future use\n\nimport joblib\n\n# Save the trained model to a file\njoblib.dump(nb, 'email_spam_nb.pkl')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 5.3| Random Forest ","metadata":{}},{"cell_type":"code","source":"rnf = RandomForestClassifier() #passing object\nrnf.fit(x_train,y_train)\n\n#prediction\npred_rnf = rnf.predict(x_test)\n\n#performance\nprint(f\"accuracy from rnadom forest:{accuracy_score(y_test,pred_rnf)*100:.2f} %\")\nprint(f\"f1 score from random forest: {f1_score(y_test,pred_rnf)*100:.2f} %\")\nprint(\"classification report : \\n\",classification_report(y_test,pred_rnf))\n\n#confusion matrix\nclf_rnf = confusion_matrix(y_test,pred_rnf)\ncx_ = ConfusionMatrixDisplay(clf_rnf,display_labels=['pishing_mail','safe_mail']).plot()\nplt.title(\"confusion matrix\")\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\npd.DataFrame(historical_smp.history)\n\npd.DataFrame(historical_smp.history)[['accuracy', 'val_accuracy']].plot()\nplt.title('Training Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('accuracy')\n\npd.DataFrame(historical_smp.history)[['loss', 'val_loss']].plot()\nplt.title('Model Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_prob_smp = model_smp.predict(x_test)\ny_pred_smp = (y_pred_prob_smp > 0.5).astype(int)\n\nfrom sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\ncnf_smp = confusion_matrix(y_test,y_pred_smp)\nax_smp = ConfusionMatrixDisplay(confusion_matrix=cnf_smp,display_labels=['pishing','normal']).plot()\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 7| Performance","metadata":{}},{"cell_type":"code","source":"results = model.evaluate(x_test, y_test)\nloss = results[0]  # Extract the loss from the results\naccuracy = results[1]  # Extract the accuracy from the results\n\nprint(f\"Model Loss: {loss}\")\nprint(f\"Model Accuracy: {accuracy*100}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_pred_prob = model.predict(x_test)\ny_pred = (y_pred_prob > 0.5).astype(int)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pd.DataFrame(historical.history)\n\npd.DataFrame(historical.history)[['accuracy', 'val_accuracy']].plot()\nplt.title('Training Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('accuracy')\n\npd.DataFrame(historical.history)[['loss', 'val_loss']].plot()\nplt.title('Model Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cnf = confusion_matrix(y_test,y_pred)\nax = ConfusionMatrixDisplay(confusion_matrix=cnf,display_labels=['pishing','normal'])\nax.plot()\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}